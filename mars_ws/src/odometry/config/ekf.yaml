imu_filter_madgwick: # combines IMU and magnetometer data from the ZED
  ros__parameters:
    use_mag: True
    use_magnetic_field_msg: True
    world_frame: 'enu' # to match robot_localization
    publish_tf: False
    publish_debug_topics: False
    mag_bias_x: 0.0
    mag_bias_y: 0.0
    mag_bias_z: 0.0

    # stateless: false
    # fixed_frame: "odom"
    # constant_dt: 0.0
    # gain: 0.1
    # zeta: 0.0
    # orientation_stddev: 0.0

# ekf_filter_node_odom:
# The ZED calculates and manages the odom->zed_camera_link transform internally, and does a pretty good job
# https://www.stereolabs.com/docs/ros2/positional-tracking

ekf_se_map: # outputs to the odometry/global topic
  # This publishes the map->odom transform
  # https://vimeo.com/142624091
  # https://docs.ros.org/en/lunar/api/robot_localization/html/_downloads/robot_localization_ias13_revised.pdf
  # https://docs.ros.org/en/melodic/api/robot_localization/html/state_estimation_nodes.html
  # https://robotics.stackexchange.com/questions/109942/odometry-with-robot-localization-using-gps-and-imu-not-encoders
  ros__parameters:
    frequency: 20.0 # The Jetson struggles to run faster than this
    two_d_mode: true  # Recommended to use 2d mode for nav2 in mostly planar environments
    print_diagnostics: false
    debug: false
    publish_tf: true

    map_frame: map
    odom_frame: odom
    base_link_frame: base_link # base_footprint is used in Gazebo
    world_frame: map

    # https://docs.nav2.org/tutorials/docs/integrating_vio.html
    # https://www.stereolabs.com/docs/ros2/020_zed-node#published-topics
    odom0: zed/zed_node/odom # prefuses IMU data with VIO
    odom0_config: [true,  true,  false,  # X, Y, Z
                  false,  false,  true,  # Roll, Pitch, Yaw
                  false, false, false,   # Vx, Vy, Vz
                  false, false, false,   # Vroll, Vpitch, Vyaw
                  false, false, false]   # Ax, Ay, Az
    odom0_differential: true # Reports the change in position as velocity measurents
    odom0_relative: true # Redundant with differential
    odom0_queue_size: 2

    odom1: odometry/gps # from the navsat_transform_node
    odom1_config: [true,  true,  false,
                  false, false, false,
                  false, false, false,
                  false, false, false,
                  false, false, false]
    odom1_differential: false
    odom1_relative: false # We want to use the absolute GPS position
    odom1_queue_size: 2

    imu0: imu/data # pre filtered with magnetometer data from the madgwick filter. Maybe consider /zed/zed_node/imu/data - Might be fused with visual odom
    imu0_config: [false, false, false,
                  false,  false,  true,
                  false, false, false,
                  false,  false,  true,    # Consider adding these acceleration values and gyro
                  true,  true,  false]
    imu0_differential: false
    imu0_relative: false # We want to use the absolute IMU orientation
    imu0_queue_size: 2

    use_control: false # we could fuse in cmd_vel commands, but they are not very accurate

    # NOTE: We just use the built-in process noise covariance, and it seems to work well

navsat_transform_node:
  # https://docs.ros.org/en/melodic/api/robot_localization/html/navsat_transform_node.html
  ros__parameters:
    frequency: 20.0 # The Jetson struggles to run faster than this
    delay: 3.0
    # IMPORTANT! We must already be correcting for the magnetic declination somewhere else.
    # When we add it here it adds a compounding, incorrect odometry/gps frame shift.
    magnetic_declination_radians: 0.0 # This might be accounted for already somewhere else in calibration.
    yaw_offset: 0.0     # IS YAW ZERO WHEN FACING EAST?
    zero_altitude: true
    broadcast_utm_transform: true
    publish_filtered_gps: true # used by the path planners
    use_odometry_yaw: true
    # wait_for_datum: true # set by the sync_origin node